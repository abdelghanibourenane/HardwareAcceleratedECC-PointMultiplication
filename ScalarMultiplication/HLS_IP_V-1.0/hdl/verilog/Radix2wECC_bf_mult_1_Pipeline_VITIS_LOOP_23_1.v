// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Radix2wECC_bf_mult_1_Pipeline_VITIS_LOOP_23_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        tmp_V_12,
        tmp_V_13_out_i,
        tmp_V_13_out_o,
        tmp_V_13_out_o_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [165:0] tmp_V_12;
input  [165:0] tmp_V_13_out_i;
output  [165:0] tmp_V_13_out_o;
output   tmp_V_13_out_o_ap_vld;

reg ap_idle;
reg[165:0] tmp_V_13_out_o;
reg tmp_V_13_out_o_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln23_fu_78_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [7:0] i_34_reg_202;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] p_Result_37_fu_148_p2;
reg   [0:0] p_Result_37_reg_210;
reg   [165:0] p_Result_39_fu_179_p4;
wire    ap_block_pp0_stage0;
wire    ap_loop_init;
reg   [7:0] i_fu_54;
wire   [7:0] i_35_fu_84_p2;
reg   [7:0] ap_sig_allocacmp_i_34;
wire   [165:0] zext_ln780_fu_90_p1;
wire   [165:0] shl_ln780_fu_94_p2;
wire   [0:0] tmp_fu_100_p3;
wire   [1:0] tmp_8_fu_108_p4;
wire   [0:0] tmp_9_fu_118_p3;
wire   [0:0] trunc_ln780_fu_126_p1;
wire   [163:0] and_ln780_1_fu_130_p8;
wire   [31:0] index_assign_cast_fu_163_p1;
wire   [0:0] p_Result_s_fu_166_p3;
wire   [0:0] xor_ln24_fu_174_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

Radix2wECC_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln23_fu_78_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_54 <= i_35_fu_84_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_54 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_34_reg_202 <= ap_sig_allocacmp_i_34;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_fu_78_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_Result_37_reg_210 <= p_Result_37_fu_148_p2;
    end
end

always @ (*) begin
    if (((icmp_ln23_fu_78_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_34 = 8'd0;
    end else begin
        ap_sig_allocacmp_i_34 = i_fu_54;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            tmp_V_13_out_o = tmp_V_12;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            tmp_V_13_out_o = p_Result_39_fu_179_p4;
        end else begin
            tmp_V_13_out_o = tmp_V_13_out_i;
        end
    end else begin
        tmp_V_13_out_o = tmp_V_13_out_i;
    end
end

always @ (*) begin
    if ((((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        tmp_V_13_out_o_ap_vld = 1'b1;
    end else begin
        tmp_V_13_out_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln780_1_fu_130_p8 = {{{{{{{tmp_fu_100_p3}, {155'd0}}, {tmp_8_fu_108_p4}}, {2'd0}}, {tmp_9_fu_118_p3}}, {2'd0}}, {trunc_ln780_fu_126_p1}};

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_35_fu_84_p2 = (ap_sig_allocacmp_i_34 + 8'd1);

assign icmp_ln23_fu_78_p2 = ((ap_sig_allocacmp_i_34 == 8'd166) ? 1'b1 : 1'b0);

assign index_assign_cast_fu_163_p1 = i_34_reg_202;

assign p_Result_37_fu_148_p2 = ((and_ln780_1_fu_130_p8 != 164'd0) ? 1'b1 : 1'b0);

always @ (*) begin
    p_Result_39_fu_179_p4 = tmp_V_13_out_i;
    p_Result_39_fu_179_p4[index_assign_cast_fu_163_p1] = |(xor_ln24_fu_174_p2);
end

assign p_Result_s_fu_166_p3 = tmp_V_13_out_i[index_assign_cast_fu_163_p1];

assign shl_ln780_fu_94_p2 = 166'd1 << zext_ln780_fu_90_p1;

assign tmp_8_fu_108_p4 = {{shl_ln780_fu_94_p2[7:6]}};

assign tmp_9_fu_118_p3 = shl_ln780_fu_94_p2[32'd3];

assign tmp_fu_100_p3 = shl_ln780_fu_94_p2[32'd163];

assign trunc_ln780_fu_126_p1 = shl_ln780_fu_94_p2[0:0];

assign xor_ln24_fu_174_p2 = (p_Result_s_fu_166_p3 ^ p_Result_37_reg_210);

assign zext_ln780_fu_90_p1 = ap_sig_allocacmp_i_34;

endmodule //Radix2wECC_bf_mult_1_Pipeline_VITIS_LOOP_23_1
