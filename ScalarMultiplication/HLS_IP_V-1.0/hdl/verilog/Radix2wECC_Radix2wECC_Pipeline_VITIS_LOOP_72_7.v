// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Radix2wECC_Radix2wECC_Pipeline_VITIS_LOOP_72_7 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_Result_106,
        buff2_address0,
        buff2_ce0,
        buff2_we0,
        buff2_d0,
        p_Result_107,
        buff3_address0,
        buff3_ce0,
        buff3_we0,
        buff3_d0
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [191:0] p_Result_106;
output  [2:0] buff2_address0;
output   buff2_ce0;
output   buff2_we0;
output  [31:0] buff2_d0;
input  [191:0] p_Result_107;
output  [2:0] buff3_address0;
output   buff3_ce0;
output   buff3_we0;
output  [31:0] buff3_d0;

reg ap_idle;
reg buff2_ce0;
reg buff2_we0;
reg buff3_ce0;
reg buff3_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln72_fu_90_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] trunc_ln73_cast16_fu_102_p1;
reg   [2:0] i_fu_40;
wire   [2:0] add_ln72_fu_96_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_i_45;
wire   [7:0] shl_ln3_fu_108_p3;
wire   [191:0] zext_ln668_fu_116_p1;
wire   [191:0] lshr_ln668_fu_120_p2;
wire   [191:0] zext_ln668_1_fu_131_p1;
wire   [191:0] lshr_ln668_1_fu_135_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
end

Radix2wECC_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        if ((icmp_ln72_fu_90_p2 == 1'd0)) begin
            i_fu_40 <= add_ln72_fu_96_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_40 <= 3'd0;
        end
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln72_fu_90_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i_45 = 3'd0;
    end else begin
        ap_sig_allocacmp_i_45 = i_fu_40;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        buff2_ce0 = 1'b1;
    end else begin
        buff2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln72_fu_90_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        buff2_we0 = 1'b1;
    end else begin
        buff2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        buff3_ce0 = 1'b1;
    end else begin
        buff3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln72_fu_90_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        buff3_we0 = 1'b1;
    end else begin
        buff3_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln72_fu_96_p2 = (ap_sig_allocacmp_i_45 + 3'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign buff2_address0 = trunc_ln73_cast16_fu_102_p1;

assign buff2_d0 = lshr_ln668_fu_120_p2[31:0];

assign buff3_address0 = trunc_ln73_cast16_fu_102_p1;

assign buff3_d0 = lshr_ln668_1_fu_135_p2[31:0];

assign icmp_ln72_fu_90_p2 = ((ap_sig_allocacmp_i_45 == 3'd6) ? 1'b1 : 1'b0);

assign lshr_ln668_1_fu_135_p2 = p_Result_107 >> zext_ln668_1_fu_131_p1;

assign lshr_ln668_fu_120_p2 = p_Result_106 >> zext_ln668_fu_116_p1;

assign shl_ln3_fu_108_p3 = {{ap_sig_allocacmp_i_45}, {5'd0}};

assign trunc_ln73_cast16_fu_102_p1 = ap_sig_allocacmp_i_45;

assign zext_ln668_1_fu_131_p1 = shl_ln3_fu_108_p3;

assign zext_ln668_fu_116_p1 = shl_ln3_fu_108_p3;

endmodule //Radix2wECC_Radix2wECC_Pipeline_VITIS_LOOP_72_7
